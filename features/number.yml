name: Number
description: The number type (and `Number` object) represents floating-point numbers, such as 42 or -4.201. JavaScript numbers can also represent boundless negative and positive values as `Infinity` or not-a-number as `NaN` (as in `0 * Infinity`).
spec: https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number-objects
status:
  compute_from: javascript.builtins.Number
compat_features:
  - javascript.builtins.Infinity
  - javascript.builtins.isNaN
  - javascript.builtins.NaN
  - javascript.builtins.Number
  - javascript.builtins.Number.EPSILON
  - javascript.builtins.Number.isFinite
  - javascript.builtins.Number.isInteger
  - javascript.builtins.Number.isNaN
  - javascript.builtins.Number.isSafeInteger
  - javascript.builtins.Number.MAX_SAFE_INTEGER
  - javascript.builtins.Number.MAX_VALUE
  - javascript.builtins.Number.MIN_SAFE_INTEGER
  - javascript.builtins.Number.MIN_VALUE
  - javascript.builtins.Number.NaN
  - javascript.builtins.Number.NEGATIVE_INFINITY
  - javascript.builtins.Number.Number
  - javascript.builtins.Number.parseFloat
  - javascript.builtins.Number.parseInt
  - javascript.builtins.Number.POSITIVE_INFINITY
  - javascript.builtins.Number.toExponential
  - javascript.builtins.Number.toFixed
  - javascript.builtins.Number.toLocaleString
  - javascript.builtins.Number.toLocaleString.locales_parameter
  - javascript.builtins.Number.toLocaleString.options_parameter
  - javascript.builtins.Number.toPrecision
  - javascript.builtins.Number.toString
  - javascript.builtins.Number.valueOf
  - javascript.builtins.parseInt
  - javascript.grammar.binary_numeric_literals
  - javascript.grammar.decimal_numeric_literals
  - javascript.grammar.hexadecimal_numeric_literals
  - javascript.grammar.numeric_separators
  - javascript.grammar.octal_numeric_literals
