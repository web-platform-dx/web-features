spec: https://w3c.github.io/webtransport/
caniuse: webtransport
usage_stats: https://chromestatus.com/metrics/feature/timeline/popularity/3472
status:
  baseline: false
  support: {}
compat_features:
  - api.WebTransport
  - api.WebTransport.WebTransport
  - api.WebTransport.close
  - api.WebTransport.closed
  - api.WebTransport.createBidirectionalStream
  - api.WebTransport.createUnidirectionalStream
  - api.WebTransport.datagrams
  - api.WebTransport.incomingBidirectionalStreams
  - api.WebTransport.incomingUnidirectionalStreams
  - api.WebTransport.ready
  - api.WebTransportBidirectionalStream
  - api.WebTransportBidirectionalStream.readable
  - api.WebTransportBidirectionalStream.writable
  - api.WebTransportDatagramDuplexStream
  - api.WebTransportDatagramDuplexStream.incomingHighWaterMark
  - api.WebTransportDatagramDuplexStream.incomingMaxAge
  - api.WebTransportDatagramDuplexStream.maxDatagramSize
  - api.WebTransportDatagramDuplexStream.outgoingHighWaterMark
  - api.WebTransportDatagramDuplexStream.outgoingMaxAge
  - api.WebTransportDatagramDuplexStream.readable
  - api.WebTransportDatagramDuplexStream.writable
  - api.WebTransportError
  - api.WebTransportError.WebTransportError
  - api.WebTransportError.source
  - api.WebTransportError.streamErrorCode

  # BYOB reader support arrived later than the rest
  # - api.WebTransport.byob_readers
  # - api.WebTransport.createUnidirectionalStream.byob_readers
  # - api.WebTransportDatagramDuplexStream.byob_readers

  # As of 2023-08-10, the spec calls these "feature at risk"
  # - api.WebTransport.WebTransport.options_congestionControl_parameter
  # - api.WebTransport.congestionControl

  # TODO: figure out what the story is with WebTransportReceiveStream
  # This feature has a different compatibility story than closely-related
  # interfaces (i.e., WebTransportBidirectionalStream)
  # - api.WebTransportReceiveStream
  # - api.WebTransportReceiveStream.getStats
